name: XVFB E2E Tests

on:
  workflow_call:
    # Make this a reusable workflow, no value needed
    # https://docs.github.com/en/actions/using-workflows/reusing-workflows

jobs:
  xvfb-e2e-tests:
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Ubuntu scenarios
          - distro: ubuntu
            version: "24.04"
            scenario: clean
            dockerfile: ubuntu-clean.dockerfile
          - distro: ubuntu  
            version: "24.04"
            scenario: with-xvfb
            dockerfile: ubuntu-with-xvfb.dockerfile
          
          # Fedora scenarios
          - distro: fedora
            version: "40"
            scenario: clean
            dockerfile: fedora-clean.dockerfile
          - distro: fedora
            version: "40" 
            scenario: with-xvfb
            dockerfile: fedora-with-xvfb.dockerfile
            
          # Alpine scenarios
          - distro: alpine
            version: "3.20"
            scenario: clean
            dockerfile: alpine-clean.dockerfile
          - distro: alpine
            version: "3.20"
            scenario: with-xvfb
            dockerfile: alpine-with-xvfb.dockerfile
          
          # Debian scenarios
          - distro: debian
            version: "12"
            scenario: clean
            dockerfile: debian-clean.dockerfile
          - distro: debian
            version: "12"
            scenario: with-xvfb
            dockerfile: debian-with-xvfb.dockerfile
          
          # Rocky Linux scenarios (CentOS replacement)
          - distro: rocky
            version: "9"
            scenario: clean
            dockerfile: rocky-clean.dockerfile
          - distro: rocky
            version: "9"
            scenario: with-xvfb
            dockerfile: rocky-with-xvfb.dockerfile
          
          # CentOS Stream scenarios (upstream RHEL)
          - distro: centos-stream
            version: "9"
            scenario: clean
            dockerfile: centos-stream-clean.dockerfile
          - distro: centos-stream
            version: "9"
            scenario: with-xvfb
            dockerfile: centos-stream-with-xvfb.dockerfile
          
          # Arch Linux scenarios
          - distro: arch
            version: "latest"
            scenario: clean
            dockerfile: arch-clean.dockerfile
          - distro: arch
            version: "latest"
            scenario: with-xvfb
            dockerfile: arch-with-xvfb.dockerfile
          
          # SUSE scenarios
          - distro: suse
            version: "15.6"
            scenario: clean
            dockerfile: suse-clean.dockerfile
          - distro: suse
            version: "15.6"
            scenario: with-xvfb
            dockerfile: suse-with-xvfb.dockerfile

    name: "XVFB E2E: ${{ matrix.distro }}:${{ matrix.version }} (${{ matrix.scenario }})"
    
    steps:
      - name: ⬇️ Checkout Code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: 🧑‍🔧 Get Core Dependencies
        uses: ./.github/workflows/actions/get-core-dependencies

      - name: Download Build Archive
        uses: ./.github/workflows/actions/download-archive
        with:
          name: webdriverio
          path: .
          filename: webdriverio-build.zip

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test container
        run: |
          docker build \
            -f e2e/wdio/xvfb/docker/${{ matrix.dockerfile }} \
            -t xvfb-test:${{ matrix.distro }}-${{ matrix.scenario }} \
            e2e/wdio/xvfb/docker/

      - name: Run XVFB E2E tests in container
        run: |
          # Copy built packages and test files to container
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            -e CI=true \
            -e NODE_ENV=test \
            -e WDIO_LOG_LEVEL=debug \
            xvfb-test:${{ matrix.distro }}-${{ matrix.scenario }} \
            bash -c "
              set -e
              set -o pipefail
              
              # Fix permissions for testuser to access workspace
              sudo chown -R testuser:testuser /workspace/
              sudo chmod -R 755 /workspace/
              
              # Install dependencies in container (pnpm already installed in Docker image)
              pnpm install --frozen-lockfile
              
              # Run the appropriate E2E test based on scenario
              if [ '${{ matrix.scenario }}' = 'clean' ]; then
                cd e2e && pnpm exec wdio ./wdio/xvfb/wdio.conf.ts --spec fresh-install.e2e.ts 2>&1 | tee /workspace/e2e/wdio/xvfb/test-output.log
              else
                cd e2e && pnpm exec wdio ./wdio/xvfb/wdio.conf.ts --spec existing-xvfb.e2e.ts 2>&1 | tee /workspace/e2e/wdio/xvfb/test-output.log
              fi
              
              # Display logs for debugging
              if [ -f /workspace/e2e/wdio/xvfb/test-output.log ]; then
                echo '=== WDIO Test Output ==='
                cat /workspace/e2e/wdio/xvfb/test-output.log
              fi
              
              # Show WDIO-generated log files
              if [ -f /workspace/e2e/wdio/xvfb/logs/wdio.log ]; then
                echo '=== WDIO Main Log ==='
                cat /workspace/e2e/wdio/xvfb/logs/wdio.log
              fi
              
              if [ -f /workspace/e2e/wdio/xvfb/logs/wdio-0-0.log ]; then
                echo '=== WDIO Worker Log ==='
                cat /workspace/e2e/wdio/xvfb/logs/wdio-0-0.log
              fi
              
              if [ -f /workspace/e2e/wdio/xvfb/logs/wdio-0-0-chromedriver.log ]; then
                echo '=== Chromedriver Log ==='
                cat /workspace/e2e/wdio/xvfb/logs/wdio-0-0-chromedriver.log
              fi
            "

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: failure()
        with:
          name: xvfb-e2e-logs-${{ matrix.distro }}-${{ matrix.version }}-${{ matrix.scenario }}
          path: |
            e2e/wdio/xvfb/logs/
            e2e/wdio/xvfb/screenshots/
            e2e/wdio/xvfb/test-output.log

  xvfb-integration-test:
    runs-on: ubuntu-latest
    needs: xvfb-e2e-tests
    
    name: "XVFB Integration Test"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Run integration test with actual browser
        run: |
          # Install Chrome for headless testing
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          
          # Run a simple WebDriverIO test to verify xvfb integration works
          cd e2e
          WDIO_LOG_LEVEL=debug pnpm exec wdio ./wdio/xvfb/wdio.conf.ts --spec existing-xvfb.e2e.ts

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        if: always()
        with:
          name: xvfb-integration-logs
          path: |
            e2e/wdio/xvfb/*.log
            e2e/wdio/xvfb/screenshots/