<%- isUsingTypeScript || esmSupport
    ? "import { Given, When, Then } from '@wdio/cucumber-framework';"
    : "const { Given, When, Then } = require('@wdio/cucumber-framework');" %>
<%
/**
 * step definition without page objects
 */
if (usePageObjects) { %>
<%- isUsingTypeScript || esmSupport
    ? `import LoginPage from '${relativePath}/login.page${esmSupport ? '.js' : ''}';`
    : `const LoginPage = require('${relativePath}/login.page');` %>
<%- isUsingTypeScript || esmSupport
    ? `import SecurePage from '${relativePath}/secure.page${esmSupport ? '.js' : ''}';`
    : `const SecurePage = require('${relativePath}/secure.page');` %>

const pages = {
    login: LoginPage
}

Given(/^I am on the (\w+) page$/, async (page) => {
    await pages[page].open()
});

When(/^I login with (\w+) and (.+)$/, async (username, password) => {
    await LoginPage.login(username, password)
});

Then(/^I should see a flash message saying (.*)$/, async (message) => {
    await expect(SecurePage.flashAlert).toBeExisting();
    await expect(SecurePage.flashAlert).toHaveTextContaining(message);
});
<% } else {

/**
 * step definition with page objects
 */
%>
Given(/^I am on the (\w+) page$/, async (page) => {
    await browser.url(`https://the-internet.herokuapp.com/${page}`);
});

When(/^I login with (\w+) and (.+)$/, async (username, password) => {
    await $('#username').setValue(username);
    await $('#password').setValue(password);
    await $('button[type="submit"]').click();
});

Then(/^I should see a flash message saying (.*)$/, async (message) => {
    await expect($('#flash')).toBeExisting();
    await expect($('#flash')).toHaveTextContaining(message);
});
<% } %>
