<%
/**
 * test with page objects
 */
if (usePageObjects) {
%><%- isUsingTypeScript || esmSupport
    ? `import LoginPage from '${relativePath}/login.page${esmSupport ? '.js' : ''}'`
    : `const LoginPage = require('${relativePath}/login.page')` %>
<%- isUsingTypeScript || esmSupport
    ? `import SecurePage from '${relativePath}/secure.page${esmSupport ? '.js' : ''}'`
    : `const SecurePage = require('${relativePath}/secure.page')` %>

describe('My Login application', () => {
    it('should login with valid credentials', async () => {
        await LoginPage.open()

        await LoginPage.login('tomsmith', 'SuperSecretPassword!')
        await expect(SecurePage.flashAlert).toBeExisting()
        await expect(SecurePage.flashAlert).toHaveTextContaining(
            'You logged into a secure area!')
    })
})

<% } else if (runner === 'browser') {

const componentSuffix = preset
    ? preset.includes('react')
        ? isUsingTypeScript ? 'tsx' : 'jsx'
        : preset
    : isUsingTypeScript ? 'ts' : 'js'
const importStatement = preset
    ? `import Component from '/path/to/component.${componentSuffix}'`
    : `import '/path/to/component.${componentSuffix}'`
const renderStatement = (preset
    ? installTestingLibrary
        ? [
            preset.includes('react')
                ? 'render(<Component />)'
                : 'render(Component, { prop: \'foobar\' })',
            'const component = screen.getByText(/Click me!/i)'
        ]
        : preset === 'solid'
            ? [
                'render(() => <Component />, ref)',
                'const component = \'.someSelector\''
            ]
            : [
                '// render component here...',
                'const component = document.querySelector("my-component")'
            ]
    : [
        `const component = document.createElement('example-component')`,
        `component.setAttribute('prop', 'foobar')`,
        `document.body.appendChild(component)`
    ]
).join('\n        ')
const assertionStatement = preset && installTestingLibrary
    ? `expect(component).toContainText('Click me!')`
    : `await expect(elem).toHaveText('Click me!')`

/**
 * Component Testing
 */
%>import { expect, $ } from '@wdio/globals'
<%- installTestingLibrary
    ? `import { render, screen } from '@testing-library/${preset}'`
    : preset === 'solid'
        ? 'import { render } from \'solid-js/web\'\n'
        : ''
%><% if (installTestingLibrary) { %>

import * as matchers from '@testing-library/jest-dom/matchers'
expect.extend(matchers)
<% } else if (preset === 'preact') { %>
import {h} from 'preact'
<% } %>
// ToDo: fix me
<%- importStatement %>

describe('<%- (preset || 'my') %> component tests', () => {<%
    if (preset === 'solid') { %>
    const ref = document.createElement('div')

    before(() => {
        document.body.appendChild(ref);
    })

    after(() => {
        document.body.removeChild(ref);
    })
    <% } %>
    it('should test my component', async () => {
        <%- renderStatement %>

        const elem = await $(component)
        await elem.click()
        <%- assertionStatement %>
    })
})
<% } else {

/**
 * test without page objects
 */
%>describe('My Login application', () => {
    it('should login with valid credentials', async () => {
        await browser.url(`https://the-internet.herokuapp.com/login`)

        await $('#username').setValue('tomsmith')
        await $('#password').setValue('SuperSecretPassword!')
        await $('button[type="submit"]').click()

        await expect($('#flash')).toBeExisting()
        await expect($('#flash')).toHaveTextContaining(
            'You logged into a secure area!')
    })
})
<% } %>
