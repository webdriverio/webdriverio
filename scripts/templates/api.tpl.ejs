<?
var method = docfiles[0]

if (method.hasDocusaurusHeader) {
?>---
id: <?= method.command ?>
title: <?= method.command ?>
<? if (method.customEditUrl) { ?>custom_edit_url: <?= method.customEditUrl ?><? } ?>
---

<? } else if (method.hasHeader) { ?>
## <?= method.command ?>
<? } ?>

<?- method.description ?>

<? if (method.alternativeCommands && method.alternativeCommands.length) { ?>
:::info

This protocol command is embedded in the following convinient method<?- method.alternativeCommands.length > 1 ? 's' : '' ?>: <?-
method.alternativeCommands
    .map((command) => `[\`${command.split('/').pop()}\`](/docs/api/${command})`)
    .join(', ')
?>. It is recommended to use <?- method.alternativeCommands.length > 1 ? 'these commands' : 'this command' ?> instead.

:::
<? } ?>

##### Usage

```js
<? if (method.isElementScope) {
?>$(selector).<?= method.command ?>(<?= method.paramString ?>)<? } else if (method.isMockScope) {
?>mock.<?= method.command ?>(<?= method.paramString ?>)<? } else {
?><?= method.isMobile ? 'driver' : 'browser' ?>.<?= method.command ?>(<?= method.paramString ?>)<? } ?>
```

<? if (method.paramTags.length) { ?>
##### Parameters

| Name | Type | Details |
| ---- | ---- | ------- |
<? method.paramTags.forEach((paramTag) => {
    var paramKey = Array.isArray(paramTag.types)
        ? paramTag.types.map((type) => `<code>${type.replace(/>/g, "&gt;").replace(/</g, "&lt;")}</code>`).join('|')
        : paramTag.type
    ?>| <code><var><?= paramTag.name ?></var></code><? if ((!paramTag.required && typeof paramTag.optional === 'undefined') || paramTag.optional) { ?><br /><span class="label labelWarning">optional</span><? }
    ?> | <?= paramKey.split('|').join(', ').replace('(', '').replace(')', '')
    ?> | <?= paramTag.description ?> |
<? }) ?>
<? } ?>

<?
const allExamples = [...method.examples, ...method.exampleReferences]
if (method.examples.length || method.exampleReferences.length) { ?>
##### Example<? if (allExamples.length > 1) { ?>s<? } ?>

<? method.exampleReferences.forEach(function(ref) {
    var filename = path.basename(ref.split('#')[0])
    var ext = path.extname(filename).slice(1)
?>
```<?= ext ?> reference title="<?= filename ?>"
<?= ref ?>
```
<? }); ?>

<? method.examples.forEach(function(example) { ?>
```<?= example.format ?><? if (example.file) { ?> title="<?= example.file ?>"<? } ?>
<?- example.code ?>
```
<? }); ?>

<? } ?>

<? if (method.returns) { ?>
##### Returns

- **&lt;<?= method.returns.type ?>&gt; <code><var><?= method.returns.name ?></var></code>:** <?= method.returns.description ?>
<? } ?>

<? if (method.throwsTags.length) { ?>
##### Throws

<? method.throwsTags.forEach(function(throwsTag) { ?>- **<?= throwsTag.type ?>**: <?= throwsTag.description ?>
<? }) ?>
<? } ?>

<? if (method.support && Object.keys(method.support).length) { ?>
##### Support

<? Object.keys(method.support).forEach(function(platform) {
?>![Support for <?=Object.keys(method.support[platform]).map(function(driver) {
    return driver + " (" + method.support[platform][driver] + ")"
}).join(", ")?>](/img/icons/<?= platform ?>.svg)
?><? }) ?>
<? } ?>
